library(restfulr)
rc
rc
  rc <- RestfulClient(test.uri)
  rc <- RestfulClient(test.uri)
HTTPProtocol <- restfulr::HTTPProtocol
HTTPProtocol <- restfulr:::HTTPProtocol
  rc <- RestfulClient(test.uri)
.HTTPProtocol <- restfulr:::.HTTPProtocol
  rc <- RestfulClient(test.uri)
acceptedMediaTypes <- restfulr:::acceptedMediaTypes
  rc <- RestfulClient(test.uri)
traceback()
getMethods(coerce, table = TRUE)
ls(getMethods(coerce, table = TRUE))
globalRestfulClientCache <- restfulr:::globalRestfulClientCache
rc
library(RUnit)
rc
acceptedMediaTypes()
HTTP <- HTTPProtocol
traceback()
URLencode(NULL)
as.character(rc$"a space")
uri.path <- restfulr::uri.path
uri.path <- restfulr:::uri.path
URLencode(character())
URLencode(c("f oo", "b ar"))
assignInNamespace("buildURI", buildURI, getNamespace("restfulr"))
assignInNamespace("buildURI", buildURI, getNamespace("restfulr"))
  rc[["sqlrest"]]
traceback()
.HTTP <- .HTTPProtocol
library(RUnit)
library(restfulr)
traceback()
debug(mediaClassFromContentType)
debug(restfulr:::mediaClassFromContentType)
n
x
Q
undebug(restfulr:::mediaClassFromContentType)
options(error=recover0
options(error=recover)
4
x
content.type
content.params
cacheInfoFromHeader
parseCacheControl
parseHTTPDate
getClass("Date")
class(Sys.time()0
class(Sys.time())
traceback()
new("application/xml", "<?xml version=\"1.0\"?><resource xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <CUSTOMERList xlink:href=\"http://www.thomas-bayer.com/sqlrest/CUSTOMER/\">CUSTOMER</CUSTOMERList>\n    <INVOICEList xlink:href=\"http://www.thomas-bayer.com/sqlrest/INVOICE/\">INVOICE</INVOICEList>\n    <ITEMList xlink:href=\"http://www.thomas-bayer.com/sqlrest/ITEM/\">ITEM</ITEMList>\n    <PRODUCTList xlink:href=\"http://www.thomas-bayer.com/sqlrest/PRODUCT/\">PRODUCT</PRODUCTList>\n</resource>")
getClass("application/xml")
new("application/xml")@.Data
new("application/xml")
new("application/xml", "foo")
as.character(new("application/xml", "foo"))
as.character(new("application/xml", "foo"))
traceback()
new("application/xml", "foo")@.Data
getClass("application/xml")
xmlChildren
rc@cache
ls(rc@cache)
m <- rc@cache[["http://www.thomas-bayer.com/sqlrest?"]]
m
trace("[[", browser, sig="RestfulClient")
  doc <- rc[["sqlrest"]]
n
result <- x@protocol$read(uri, cacheInfo(cached.media))
result <- x@protocol$read(uri, NULL)
class(result)
media <- result
x@cache[[uri]] <- media
as.list(x@cache)
uri
setReplaceMethod
Q
rc$sqlrest[["CUSTOMER"]]
c
rc$sqlrest[["CUSTOMER"]]
n
result
n
x@cache[[uri]] <- media
.GlobalEnv$foo <- 2
ls(.GlobalEnv)
.GlobalEnv$foo <- NULL
ls(.GlobalEnv)
Q
new("application/xml", "<foo/>")
new("application/xml", "<foo/>")
showMethods(XML::xmlChildren)
XML::xmlChildren
methods(XML::xmlChildren)
library(XML)
methods(XML::xmlChildren)
methods("xmlChildren")
doc
xmlRoot(doc)
args(xmlTreeParse)
xmlTreeParse("", asText=TRUE)
xmlTreeParse("<xml/>", asText=TRUE)
length(XML::xmlChildren(XML::xmlRoot(doc)))
rc
getGeneric("[[<-")
trace("[[", browser, sig="RestfulClient")
n
result
debug(x@protocol$read)
result <- x@protocol$read(uri, cacheInfo(cached.media))
n
response$header
n
m <- responseToMedia(response)
m
selectMethod("[[<-", "MediaCache")
ans
params
query
c(rc, "select", query)
library(restfulr)
json
cat(json)
length
encodeString
library(RestUri)
library(restfulr)
parseURI <- XML::parseURI
parseURI(test.uri)
library(restfulr)
rc
library(RUnit)
doc
read <- restfulr:::read
update <- restfulr:::update
create <- restfulr:::create
delete <- restfulr:::delete
doc
json
debug(restfulr:::query)
n
query.params
n
trace(read, browser, sig=c("RestUri"))
n
c
cached.media
is.null(cached.media)
x@cache
uri
cacheInfo(cached.media)
x@protocol$read(uri)
x@protocol$read(uri, cacheInfo(NULL))
debug(x@protocol$read)
x@protocol$read(uri, cacheInfo(NULL))
n
response
x
Q
rc
c
c
json
c
c
options(error=recover)
c
c
parseHTTPDate
x
.httpDateString
  solr <- rsolr::TestSolr()
  solr <- rsolr::TestSolr()
  solr <- rsolr:::TestSolr()
library(restfulr)
traceback()
selectMethod(create, class(uri))
uri$update
options(error=recover)
uri$update
x
i
list(...)
sys.function()
selectMethod("[[", "RestUri")
setReplaceMethod
Q
RCurl::curlPerform
library(RCurl)
help(curlOptions)
listCurlOptions()
library(rjson)
library(RCurl)
help(curlPerform)
create(uri$foo, doc)
getURLContent
parseHTTPHeader
stop.if.HTTP.error
RCurl:::stop.if.HTTP.error
postForm
RCurl:::.postForm
library(RCurl)
  create(uri$update, doc)
debug(uri@protocol$create)
n
opts
opts
paste(character(), character(), sep="foo")
opts
value
class(value)
value <- new("application/json", value)
opts
value
opts
x
paste("foo", character())
URLencode
paste(list("foo"))
x <- "http://localhost:8983/solr/update"
postForm(x, .opts=opts)
opts
value <- "[{\"id\":\"1112211111\",\"name\":\"my name!\"}]"
x
value <- "http://localhost:8983/solr/update/json"
postForm(x, .opts=opts)
x <- "http://localhost:8983/solr/update/json"
postForm(x, .opts=opts)
opts
opts$postfields <- "[{\"id\":\"1112211111\",\"name\":\"my name!\"}]"
postForm(x, .opts=opts)
toJSON(list(doc))
Q
debug(uri@protocol$read)
n
x
n
response
x <- "http://localhost:8983/solr/update?commit=true"
response
l <- list(foo="bar")
mode(l)<-"character"
l
c
Q
c
options(error=recover)
c
cacheInfoFromHeader
x
parseHTTPDate(expires)
expires
parseHTTPDate
.httpParseDateString
cache.control
debug(parseCacheControl)
n
fields
x
n
has.val
keys
key.val
l
Sys.time() + 30
c
info.args
x
x[["ETag"]]
info.args
args(c)
methods("c")
info.args
str(info.args$lastModified)
strptime
Q
help(strptime)
traceback()
options(error=recover)
5
mediaClassFromContentType
x
response
response$header["status"]
HTTP_STATUS$Not_Modified
doc
doc2
doc[[1]]
doc[[1]][[1]]
doc[[1]][[1]][[1]][[1]][[1]]
XML::getNodeSet(doc, "//response/status")
XML::getNodeSet
XML::getNodeSet(doc[[1]], "//response/status")
XML::getNodeSet(doc[[1]][[1]], "//response/status")
XML::getNodeSet(doc[[1]][[1]], "//response/int[name = 'status']/text()")
XML::getNodeSet(doc[[1]][[1]], "//response/lst/int[name = 'status']/text()")
XML::getNodeSet(doc[[1]][[1]], "//response/lst/int[@name = 'status']/text()")
xmlValue(XML::getNodeSet(doc[[1]][[1]], "//response/lst/int[@name = 'status']"))
XML::xmlValue(XML::getNodeSet(doc[[1]][[1]], "//response/lst/int[@name = 'status']"))
XML::xmlValue(XML::getNodeSet(doc[[1]][[1]], "//response/lst/int[@name = 'status']")[[1]])
x <- doc
status
doc2
doc
doc
library(restfulr)
library(RUnit)
uri
options(error=recover)
5
response
)
library(restfulr)
library(RUnit)
null
traceback()
library(restfulr)
library(RUnit)
l <- list(2,3)
l[] <- NULL
l
l <- list(2,3)
l[] <- list()
l <- list(2,3)
l[] <- 1:3
l
l <- list(2,3)
l[] <- list(NULL)
l
l <- list(2,3)
l[1:2] <- NULL
l
recycleVector(NULL, 2)
IRanges:::recycleVector(NULL, 2)
l <- list(2,3)
l[1:2] <- list(NULL)
l
optimize
