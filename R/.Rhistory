library(RCurl)
getURL
getGeneric("[")
getGeneric("[[")
getGeneric("[<-")
getGeneric("[[<-")
args(sapply)
sapply
l <- list()
l[] <- c("foo", "bar")
l
l[c(1,2)] <- c("foo", "bar")
l
v <- 1
v[2] <- 3
v
env <- new.env()
env[["foo"]]
env[["foo"]] <- 2
env$a
getGeneric("$<-")
mtcars[["mpg"]]
mtcars[["mpg2"]]
showMethods(extractROWS)
library(IRanges)
showMethods(extractROWS)
showMethods(IRanges:::extractROWS)
selectMethod(IRanges:::extractROWS, "vectorORfactor")
v <- 1:10
v[] <- 5
v
v[] <- 1:50
v
v[1:10] <- 1:50
v[1:50] <- 1:2
v
l <- list(1,2)
lapply(1:2, `[[`, x = x)
lapply(1:2, `[[`, x = l)
x <- l
i <- 1:2
sapply(i, function(i) x[[i, ...]], simplify = FALSE)
library(RCurl)
getURL
basicTextGatherer
help(curlOptions)
google <- getURL("http://www.google.com", header=TRUE)
google <- getURL("http://www.google.com", header=TRUE)
google
help(curlOptions)
listCurlOptions()
help(basicTextGatherer)
help.search("header")
help(basicHeaderGatherer)
args(curlPerform)
args(basicTextGatherer)
help(curlOptions)
getCurlOptionTypes(opts = "header")
getCurlOptionTypes(opts = getCurlOptionsConstants())
args(setClass)
help(basicTextGatherer)
basicTextGatherer
getBinaryURL
getClass("atomic")
help(basicTextGatherer)
getURLContent
dynCurlReader
help(getURLContent)
getClass("TextMedia")
new("TextMedia", as.raw(1))
as.character(as.raw(23))
charToRaw(as.raw(23))
rawToChar(as.raw(23))
charToRaw(as.raw(32))
rawToChar(as.raw(32))
as.character(as.raw(32))
getURLContent
RCurl:::getContentType
help(package="RCurl")
help(getFormParams)
getFormParams
help(getURL)
getClass("TextMedia")
test <- new("TextMedia")
is.character(test)
typeof(test)
as
setAs("character", "ANY", function(from) NULL)
setAs("Media", "ANY", function(from) NULL)
setAs("Media", "ANY", function(from) NULL, replace=FALSE)
help(setAs)
setAs("Media", "GRanges", function(from) NULL)
selectMethod(coerce, c("Media", "ANY"))
setAs("Media", "GRanges", function(from) GRanges())
selectMethod(coerce, c("Media", "ANY"))
removeMethod(coerce, c("Media", "ANY"))
selectMethod(coerce, c("Media", "ANY"))
`$<-`
`[[<-`
assign
getGeneric("assign")
Date()
help("Date")
Sys.Date()
Sys.Date
Sys.time()
old.time <- Sys.time()
old.time < Sys.time()
help(Sys.time)
help(as.POSIXct)
as.POSIXct(0)
as.POSIXlt(0)
as.POSIXct(0, origin = "1960-01-01")
as.POSIXct("1960-01-01")
as.Date
as.Date(0)
print.Date
as.character.Date
help(format)
help("DateTimeClasses")
format.Date
format.POSIXlt
help(as.POSIXlt)
format(Sys.time(), "%a d %b %Y %H:%M:%S %Z")
format(Sys.time(), "%a %d %b %Y %H:%M:%S %Z")
postForm
.contentEncodeFun
RCurl:::.contentEncodeFun
RCurl:::.contentEncodeFun
showMethods(coerce)
x<-showMethods(coerce)
showMethods
x <- showMethods(classes = "Ranges")
args(getMethods)
getMethods(coerce, table=TRUE)
ls(getMethods(coerce, table=TRUE))
getMethods(coerce)
ls(getMethods(coerce, table=TRUE))
names(getClass("Media")@subclasses)
isClass
isClass(NA)
extends(NA, "Media")
help(strptime)
help(package="RCurl")
AUTH_ANY
help(HTTP_VERSION_1_0)
help(AUTH_ANY)
help.search("status")
"
`
help(curlPerform)
Sys.time() + 10
Sys.time() + 10
Sys.time()
Sys.time()
Sys.time() + 10
setClass("Null", representation = c(foo = "character"), contains = "NULL")
setClass("Null", representation = list(foo = "character"), contains = "NULL")
new("Null")
typeof(new("Null"))
new("Null")@.Data
is.null(new("Null"))
base64(NULL)
base64
listCurlOptions()
getGeneric("eval")
library(DBI)
ls(2)
help(dbCommit)
help(package="DBI")
args(setRefClass)
evalq
eval
base::eval
showMethods(eval)
l <- List(foo = 2)
l <- IRanges::List(foo = 2)
l <- IRanges::SimpleList(foo = 2)
l
eval(foo, l)
eval(quote(foo), l)
evalq(foo, l)
evalq(foo, l)
as.name("foo?bar")
help("[[")
help(pmatch)
data(mtcars)
mtcars[[NA]]
help(subset)
help(aggregate)
help(ts)
help(aggregate)
help(ts)
scale
help(scale)
help.search("scale")
args(scales::rescale)
args(dist)
help(dist)
edit
help.search("edit")
args(subset)
args(subset.data.frame)
subset.data.frame
translate
subset.data.frame
seq_along
getGeneric("seq_along")
q <- new("SolrQuery")
c(q, "foo")
q
append(q, "foo")
args(append)
BiocGenerics::append
transform
transform.data.frame
as.character(list(foo=2))
l <- list()
names(l) <- ""
BiocGenerics::sort
order
window
help(window)
NULL + 1L
is.unsorted
IRanges::is.unsorted
help(is.unsorted)
.Machine
l <- list(foo="bar")
l[[`foo`]]
l[[quote(foo)]]
paste(list("bar", "foo"))
paste(list())
e
E
pi
quote("foo" "bar")
quote(foo bar)
help(Summary)
`!=`
`(`
deparse("foo")
paste(c(foo="bar"))
args(install.packages)
getOption("pkgType")
args(available.packages)
help(install.packages)
.Machine
.Platform
help(.Platform)
R.version$platform
args(contrib.url)
getClass("RangesMapping")
help(chartr)
c(quote(foo), quote(bar))
call <- quote(1 + 1)
call
call[-1] <- c(quote(foo), quote(bar))
call
call
args(call)
help(call)
subset
subset.default
subset.data.frame
help(substitute)
x <- quote(foo + bar)
substitute(x, list(foo = 2))
all.names(x)
args(sample)
sample(10, 2)
urlEncode
URIencode
 find("URLencode")
library(XML)
getClass("XMLInternalNode")
getClass("XMLAbstractNode")
help(xmlTreeParse)
unique
base::unique
unique.default
factor
args(fromJSON)
rjson::fromJSON
fromJSON("{ foo: 'bar' int:10 }"
)
rjson::fromJSON("{ foo: 'bar' int:10 }")
rjson::fromJSON('{ "foo": "bar" "int":10 }')
rjson::fromJSON('{ "foo": "bar" "int":10 }')
"
rjson::fromJSON("\"foo\": \"bar\" \"int\":10 }")
rjson::fromJSON("{\"foo\": \"bar\" \"int\":10 }")
"
rjson::fromJSON("{\"foo\": \"bar\", \"int\":10 }")
l <- rjson::fromJSON("{\"foo\": \"bar\", \"int\":10 }")
sapply(l, typeof)
character(2)
help(stop)
help(simpleError)
VariantTools:::VariantCallingFilters
VariantTools:::MinCountFilter
selectMethod(VariantTools::callVariants, "VRanges")
VariantAnnotation::softFilter
packageDescription("RBGL")
packageDescription("foo")
typeof(packageDescription("foo"))
installed("foo")
installed("RBGL")
RBGL::connectedComp
help(read.csv)
max(NULL, 1)
help(cut)
help(count.fields)
help(count.fields)
count.fields
RUnit::checkTRUE
0.93 * 20000
`[[`
getGeneric("[[")
setClass("RestContainer")
getMethod("[[", "RestContainer")
